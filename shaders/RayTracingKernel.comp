#version 460 core

struct Material
{
	vec3 m_Albeido; //Color
	vec3 m_Specular;
	vec3 m_Emission;
	float m_Roughness;
};

struct Object
{
	vec3 m_ObjPosition;
	vec3 m_ObjScale;
	float m_ObjRadius;
	int m_ObjType;
	Material m_ObjMaterial;

	// Plane stuff
	vec3 m_ObjTangent;
	vec3 m_ObjBiTangent;
	vec3 m_ObjNormal;
	float m_ObjUmax, m_ObjUmin;
	float m_ObjVmax, m_ObjVmin;
};

struct PointLight
{
	vec3 m_LightPosition;
	vec3 m_LightColor;
	float m_LightRadius;
};

struct Ray
{
	vec3 RayOrigin;
	vec3 RayDirection;
};

struct hitPoint
{
	float m_HitDistance;
	vec3 m_WorldNormal;
	vec3 m_WorldPosition;
	vec3 m_WorldColor;

	int m_ObjectIndex;
};

struct RenderData
{
	float m_Rt;
	vec3 m_RColor;
	bool m_RHit;

	vec3 m_RNormal;
	vec3 m_RPosition;
};


layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D screen;

uniform vec3 CameraPosition;
uniform vec3 CameraForward;
uniform vec3 CameraRight;
uniform vec3 CameraUp;
uniform Object u_Objects[2];
uniform PointLight u_PointLight;
uniform Material u_Material;

const vec3 sunDirection = normalize(vec3(2.0, 0.5, -1.0));


RenderData RayCast(Ray ray);
void hit(Ray ray, Object sphere, in float t, inout RenderData renderdata);
bool boxHit(Ray ray, Object object, inout float t);
void planeHit(Object plane, Ray ray, in float tMin, in float tMax, inout RenderData renderdata);

void main()
{
	vec3 pixel = vec3(0.5,0.5,0.5);
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 dims = imageSize(screen);

	if(pixel_coords.x >= dims.x || pixel_coords.y >= dims.y)
	{
		return;
	}

	float x = (2.0 * pixel_coords.x - dims.x) / dims.x; // [-1.0, 1.0]
	float y = (2.0 * pixel_coords.y - dims.y) / dims.x; // [-1.0, 1.0]

	Ray m_Ray;
	m_Ray.RayOrigin = CameraPosition; // oli (x,y,0.0) nyt on (0.0,0.0,1.0)
	m_Ray.RayDirection = normalize(CameraForward + x * CameraRight + y * CameraUp);

	int bounces = 2;
	vec3 color = vec3(1.0);
	float multiplier = 1.0f;
	float minHitDist = 10000;

	for(int i = 0; i < bounces; i++)
	{
		RenderData m_RenderData = RayCast(m_Ray);

		if(!m_RenderData.m_RHit)
		{
			break;
		}

		color = color * m_RenderData.m_RColor;

		m_Ray.RayOrigin = m_RenderData.m_RPosition + m_RenderData.m_RNormal * 0.00001;
        m_Ray.RayDirection = reflect(m_Ray.RayDirection, m_RenderData.m_RNormal);
	}
		
////				color += pixel * multiplier;
////			
////				multiplier *= 0.2;
////			
////				m_Ray.RayOrigin = hit_pos + normal * 0.0001; //Need to offset origin by very small amount so we dont hit our sphere we're trying to bounce off of.
////				m_Ray.RayDirection = reflect(m_Ray.RayDirection, normal); // reflect() I - 2.0 * dot(N, I) * N from khronos reference page.

	//pixel = RayCast(m_Ray);


	imageStore(screen, pixel_coords, vec4(color, 1.0));
}

RenderData RayCast(Ray ray)
{
	vec3 color = vec3(0.5,0.5,0.5); // Vector where we store our colors
	float ClosestT = 999999; // Closest hit
	RenderData m_RenderData;
	m_RenderData.m_Rt = 99999;
	bool hitOrnot = false;

	for(int i = 0; i < u_Objects.length(); i++)
	{
		if(u_Objects[i].m_ObjType == 0)
		{
			hit(ray, u_Objects[i], ClosestT, m_RenderData);
			if(m_RenderData.m_RHit)
			{
				ClosestT = m_RenderData.m_Rt;
				hitOrnot = true;
			}
		}
	}
//	for(int i = 0; i < u_Objects.length(); i++)
//	{
//		if(u_Objects[i].m_ObjType == 1)
//		{
//			planeHit(u_Objects[i], ray, 0.001, ClosestT, m_RenderData);
//			if(m_RenderData.m_RHit)
//			{
//				ClosestT = m_RenderData.m_Rt;
//				hitOrnot = true;
//			}
//		}
//	}

	m_RenderData.m_RHit = hitOrnot;
	return m_RenderData;
}

void hit(Ray ray, Object sphere, in float t, inout RenderData renderdata)
{
	int bounces = 2;
	float multiplier = 1.0;
	vec3 color = vec3(0.0);
	vec3 o_c = ray.RayOrigin - sphere.m_ObjPosition;
	float a = dot(ray.RayDirection, ray.RayDirection);
	float b = 2 * dot(ray.RayDirection, o_c);
	float c = dot(o_c, o_c) - sphere.m_ObjRadius * sphere.m_ObjRadius;
	float intersectionState = b * b - 4 * a * c; //Quadratic formula discriminant.
	if(intersectionState > 0)
	{
		float tHit = (-b - sqrt(intersectionState)) / (2 * a); //Quadratic formula.
		if(tHit < t && tHit > 0.0001)
		{
				renderdata.m_Rt = tHit;
				renderdata.m_RColor = sphere.m_ObjMaterial.m_Albeido;
				renderdata.m_RPosition = ray.RayOrigin + renderdata.m_Rt * ray.RayDirection;
				renderdata.m_RNormal = normalize(renderdata.m_RPosition - sphere.m_ObjPosition);
				float light_amount = max(0.0, dot(-u_PointLight.m_LightPosition, renderdata.m_RNormal));
				renderdata.m_RColor *= light_amount;

				renderdata.m_RHit = true;
				return;
		}
	}

	renderdata.m_RHit = false;
}

void planeHit(Object plane, Ray ray, in float tMin, in float tMax, inout RenderData renderdata)
{
	float denom = dot(plane.m_ObjNormal, ray.RayDirection); 
    if (abs(denom) < 0.000001) { 
        vec3 d = plane.m_ObjPosition - ray.RayOrigin; 
        float t = dot(d, plane.m_ObjNormal) / denom;  
    
		if(t > tMin && t < tMax)
		{
		  vec3 testPoint = ray.RayOrigin + t * ray.RayDirection;
          vec3 testDirection = testPoint - plane.m_ObjPosition;

            float u = dot(testDirection, plane.m_ObjTangent);
            float v = dot(testDirection, plane.m_ObjBiTangent);

            if (u >  plane.m_ObjUmin && u < plane.m_ObjUmax && v > plane.m_ObjVmin && v < plane.m_ObjVmax) {
                renderdata.m_Rt = t;
				renderdata.m_RColor = plane.m_ObjMaterial.m_Albeido;
				renderdata.m_RPosition = testPoint;
				renderdata.m_RNormal = plane.m_ObjNormal;
				float light_amount = max(0.0, dot(-u_PointLight.m_LightPosition, renderdata.m_RNormal));
				renderdata.m_RColor *= light_amount;
				renderdata.m_RHit = true;
				return;
            }
		}
	}
	renderdata.m_RHit = false;
}


bool boxHit(Ray ray, Object object, inout float t)
{
	float t1 = -1000000000000.0;
    float t2 = 1000000000000.0;

	vec3 boxMin = object.m_ObjPosition - object.m_ObjScale / 2.0; // 6.0f, -1.0f, 0.0f - 2.0, 1.0, 1.0 / 2.0 = 5.0, -1.5, -0.5
	vec3 boxMax = object.m_ObjPosition + object.m_ObjScale / 2.0; // 6.0f, -1.0f, 0.0f + 2.0, 1.0, 1.0 / 2.0 = 7.0, 0.5, 0.5

	vec3 t0s = (boxMin - ray.RayOrigin) / ray.RayDirection;
    vec3 t1s = (boxMax - ray.RayOrigin) / ray.RayDirection;

    vec3 tsmaller = min(t0s, t1s);
    vec3 tbigger = max(t0s, t1s);

    t1 = max(t1, max(tsmaller.x, max(tsmaller.y, tsmaller.z)));
    t2 = min(t2, min(tbigger.x, min(tbigger.y, tbigger.z)));

	t = t1;

	return t1 >= 0 && t1 <= t2;
}

